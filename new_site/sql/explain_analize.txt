https://habr.com/ru/articles/203320/
Генерация большой таблицы
CREATE TABLE foo (c1 integer, c2 text);
INSERT INTO foo
  SELECT i, md5(random()::text)
  FROM generate_series(1, 1000000) AS i;

Запрос:
parkingcar=# select * from parking p;
 id | address
----+---------
  0 | Perm
  1 | Moscow

Анализы запроса:
=======================================================================================================
parkingcar=# EXPLAIN ANALYZE select * from parking p;
                                               QUERY PLAN
--------------------------------------------------------------------------------------------------------
 Seq Scan on parking p  (cost=0.00..11.40 rows=140 width=520) (actual time=0.007..0.008 rows=2 loops=1)
 Planning time: 0.043 ms
 Execution time: 0.022 ms
(3 строки)

Seq Scan - последовательное, блок за блоком, чтение данных таблицы
cost -  Что такое cost? Это НЕ ВРЕМЯ, а некое сферическое в вакууме понятие,
        призванное оценить затратность операции.
        Первое значение 0.00 — затраты на получение первой строки.
        Второе — 11.40 — затраты на получение всех строк.
rows — приблизительное количество возвращаемых строк при выполнении операции Seq Scan.
width — средний размер одной строки в байтах

actual time - продолжительность
loops - количество выполнений
=======================================================================================================
parkingcar=# select * from parking p
id|address|
--+-------+
 0|Perm   |
 1|Moscow |
=======================================================================================================
parkingcar=# EXPLAIN select * from parking p
QUERY PLAN                                                  |
------------------------------------------------------------+
Seq Scan on parking p  (cost=0.00..11.40 rows=140 width=520)|
=======================================================================================================
После вставки строк нужно обновить данные, выполнив:
parkingcar=# ANALYZE parking
(parking это таблица)
=======================================================================================================
Запрос (EXPLAIN select * from parking p) это только ожидания планировщика.
Реальные данные можно получить выполнив анализ и запрос вместе:
parkingcar=# EXPLAIN (ANALYZE) SELECT * FROM parking;
QUERY PLAN                                                                                      |
------------------------------------------------------------------------------------------------+
Seq Scan on parking  (cost=0.00..1.02 rows=2 width=10) (actual time=0.008..0.009 rows=2 loops=1)|
Planning time: 0.188 ms                                                                         |
Execution time: 0.033 ms                                                                        |

-> Появилось еще "Execution time"
=======================================================================================================
parkingcar=# INSERT INTO foo
  SELECT i, md5(random()::text)
  FROM generate_series(1, 500000) AS i;
==========
parkingcar=# EXPLAIN SELECT * FROM foo;
QUERY PLAN                                                  |
------------------------------------------------------------+
Seq Scan on foo  (cost=0.00..27501.00 rows=1500000 width=37)|
==========
parkingcar=# EXPLAIN (ANALYZE) select * from foo;
QUERY PLAN                                                                                                    |
--------------------------------------------------------------------------------------------------------------+
Seq Scan on foo  (cost=0.00..27501.40 rows=1500040 width=37) (actual time=0.018..387.302 rows=1500040 loops=1)|
Planning time: 0.196 ms                                                                                       |
Execution time: 527.409 ms                                                                                    |
=======================================================================================================
Copy (Select * From foo) To '/tmp/test.csv' With CSV DELIMITER ',' HEADER;
=======================================================================================================