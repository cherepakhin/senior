Сколько стоит разработка ПО и почему это дорого?

По мотивам:
https://www.profiz.ru/se/1_2023/svoe_PO/
https://studopedia.org/5-83566.html

И так, итоги:

Переменные:
    Деньги на саму разработку и внедрение
    Время на разработку
    Качество (доработки и т.п.)

Оценка ПО:
    материальная (теми же силами делается БОЛЬШИЙ объем работ => больше прибыль)
    нематериальная (удовлетворенность клиентов)

Деньги
"В самый первый день работы над проектом вы не сможете задействовать сразу всех 40 программистов. Для начала необходимо задействовать небольшую команду. Затем к проекту необходимо подключить еще одну команду. После этого вы сможете использовать четыре программистских рабочих группы. В течение двух лет у вас появится возможность подключить к работе всех 40 программистов, однако в самом начале сделать этого нельзя." (https://studopedia.org/5-83567.html). Это, скорее, вопрос управления, и мне, как разработчику, не особенно интересен.

Время на разработку
Как можно влиять?
- Квалификация разработчиков и не только разработчиков, но и др. членов команды.
- Бывает, что время не поддается контролю со стороны менеджеров проекта – его контролируют заказчики.
Я, как разработчик, могу подобрать инструменты разработки для сокращения этого времени. Естественно, с учетом на моей квалификации и опыта (примеры: выделение микросервисов в Movix.ru, применение Camunda в МТС, использование Camel для оперативного изменения поведения в торговой сети El59).

Качество
Что входит в качество?
- Продуманность требований к системе. "Зачастую, настаивая на улучшении качества, мы можете завершить проект быстрее, чем запланировано." (https://studopedia.org/5-83567.html). При этом увеличивается время на аналитику. В одном случае под качеством понимается скорость РАБОТЫ системы, в другом удобство пользователя, в третьем сокращение нагрузки на сотрудников, в четвертом минимизация использования системных ресурсов при работе системы.
- Сократив объем работ, вы можете повысить качество (кто пробовал съесть слона?). Точнее: работы первой очереди (1.х версии), второй очереди (2.х версии) и т.д. Ничего нового.
- Следует из предыдущего. Разделение на этапы. Должны ли быть введенные в эксплуатацию этапы законченными? Наверное, нет. В дальнейшем содержание частей ПО, уже введенных в эксплуатацию, может меняться (дорабатываться).
- Качественную и продуманную архитектуру легко расширять. Но сбор требоваий (аналитика) все равно стоит остро и вряд ли может полностью определен в конкретный момент. Требования могут (и, по идее, должны) меняться в течении внедрения системы. (пример "от Karaf пришли к Camunda" https://v.perm.ru/index.php/component/content/article/camunda-haos?catid=15&Itemid=101)
- Разработчики работать с аналитиками быть в контакте постоянно. И обязательна обратная связь, аналитик должен знать о результатах внедрения. Работа аналитика не заканчивается на формировании требований.
И с другой стороны, разработчик должен быть в курсе текущих задач аналитика. Поверхностно, чтобы видеть перспективу.
- Разработчик МОЖЕТ знакомить аналитика с сутью разработки. Опять же - поверхностно, чтобы аналитик примерно представлял объем работ.
- Тестирование (unit, интеграционное, нагрузочное). Изменения требований, внезапно открывшиеся "по ходу", после уточнений, более проще принимаются разработчиками. Тесты покажут проблемные места, свзанные с внезапно открывшимися "по ходу" изменений.
- Наблюдаемость! Разработчики отделены от "прода" железобетонной стеной, что, может быть, и нормально. Но отсутствие полной информации о работе системы, или о возникшем инциденте, никак не поможет улучшить работу системы. В случае инцидентов, одно из решений -  предоставление информации условий возникновения инцидента, предоставление логов системы разработчику. В идеале, предоставление параметров при возникновении ошибки, или ее демонстрация. Вроде бы, и так понятно, но может быть запрещено политиками заказчика. В общем, наблюдаемость влияет на качество, а значит и на стоимость.

---------------
О получении лога.
1. Через стандартные инструменты получения протоколов работы GrayLog и т.п. И тут разработчик сам должен позаботиться о качестве логов. Вывод в лог переменных при возникновении ошибки (пример:
log.error("Not found product code={} name={}", code, name); )
2. Через хак получения лога через служебный REST, в случае когда НЕТ оперативного доступа к сервисам логирования на prod:

@RestController
@Slf4j
public class LogController {

    @Value("${user.dir}")
    String basedir;

    @GetMapping(value = {"/log"})
    public String getLog(
        @RequestParam(name = "path", defaultValue = "log/app.log/spring.log") String path)
        throws IOException {
        File current = new File(basedir + File.separator + path);
        log.info(current.getAbsolutePath());
        return new String(Files.readAllBytes(current.toPath()));
    }
}

Понятно, что это закладка, но это решение должно быть согласовано с заказчиком и применены соответсвующие меры безопасности. Еще пример https://www.baeldung.com/spring-boot-changing-log-level-at-runtime.
Есть способ полученя лога через Spring Boot Admin https://www.baeldung.com/spring-boot-changing-log-level-at-runtime#3-using-spring-boot-admin.