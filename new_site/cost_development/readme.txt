Сколько стоит разработка ПО и почему это дорого?

По мотивам:
https://www.profiz.ru/se/1_2023/svoe_PO/
https://studopedia.org/5-83566.html

И так, итоги:

Переменные:
    Деньги на саму разработку и внедрение
    Время на разработку
    Качество (доработки и т.п.)

Оценка ПО:
    материальная (теми же силами делается БОЛЬШИЙ объем работ => больше прибыль)
    нематериальная (удовлетворенность клиентов)

Риски
В чем риски? Нечеткие требования, готовность заказчика к изменениям, квалификация команды. Риск есть всегда. Но риск должен быть оправдан. Можно ли как-то минимизировать риски?
"Переписать все под новые требования". А под какие требования? Сиюминутные? Заплатка на заплатку и версия 2.0? А будет ли переписанное лучше? Будет, но насколько?

    Готовность заказчика к изменениям.
    Вспомни мебельщиков. Когда управляющего уже столько раз нагрели, что он слова "программист", "система" слышать не хочет. Или проект "ТВ через интернет", когда предложений по исправлению текущего состояния море, но никто ничего <b>не гарантирует</b> и не обозначает время (тут же еще готовность соседей к изменениям). МТС пошел на риск, после демо версии, даже не демо, а после бумаги с новым видением и плана перехода на новые рельсы, где суммировались все недочеты.

Деньги
<ul>"В самый первый день работы над проектом вы не сможете задействовать сразу всех 40 программистов. Для начала необходимо задействовать небольшую команду. Затем к проекту необходимо подключить еще одну команду. После этого вы сможете использовать четыре программистских рабочих группы. В течение двух лет у вас появится возможность подключить к работе всех 40 программистов, однако в самом начале сделать этого нельзя."</ul> (https://studopedia.org/5-83567.html). Это, скорее, вопрос управления, и мне, как разработчику, не особенно интересен. Я, как разработчик, работая с devops инженерами, могу обсуждать ресурсы.

Время на разработку
Как можно влиять?
- Квалификация разработчиков и не только разработчиков, но и др. членов команды.
- Бывает, что время не поддается контролю со стороны менеджеров проекта – его контролируют заказчики.
Я, как разработчик, могу подобрать инструменты для сокращения времени на разработку (примеры: выделение микросервисов в Movix.ru, применение Camunda в МТС, использование Camel для оперативного изменения поведения системы в торговой сети El59). Работая с аналитиками, транслировать предложения заказчику.



Качество
Что входит в качество?
- Продуманность требований к системе. "Зачастую, настаивая на улучшении качества, мы можете завершить проект быстрее, чем запланировано." (https://studopedia.org/5-83567.html). При этом увеличивается время на аналитику. В одном случае под качеством понимается скорость РАБОТЫ системы, в другом удобство пользователя, в третьем сокращение нагрузки на сотрудников, в четвертом минимизация использования системных ресурсов при работе системы.
- Сократив объем работ, вы можете повысить качество (кто пробовал съесть слона?). Точнее: работы первой очереди (1.х версии), второй очереди (2.х версии) и т.д. Ничего нового.
- Следует из предыдущего. Разделение на этапы. Должны ли быть введенные в эксплуатацию этапы законченными? Наверное, нет. В дальнейшем содержание частей ПО, уже введенных в эксплуатацию, может меняться (дорабатываться).
- Качественную и продуманную архитектуру легко расширять. Но сбор требоваий (аналитика) все равно стоит остро и вряд ли может полностью определен в конкретный момент. Требования могут (и, по идее, должны) меняться в течении внедрения системы. (пример "от Karaf пришли к Camunda" https://v.perm.ru/index.php/component/content/article/camunda-haos?catid=15&Itemid=101)
- Разработчики работать с аналитиками быть в контакте постоянно. И обязательна обратная связь, аналитик должен знать о результатах внедрения. Работа аналитика не заканчивается на формировании требований.
И с другой стороны, разработчик должен быть в курсе текущих задач аналитика. Поверхностно, чтобы видеть перспективу.
- Разработчик МОЖЕТ знакомить аналитика с сутью разработки. Опять же - поверхностно, чтобы аналитик примерно представлял объем работ.
- Тестирование (unit, интеграционное, нагрузочное). Изменения требований, внезапно открывшиеся "по ходу", после уточнений, более проще принимаются разработчиками. Тесты покажут проблемные места, свзанные с внезапно открывшимися "по ходу" изменений.
- Наблюдаемость! Разработчики отделены от "прода" железобетонной стеной, что, может быть, и нормально. Но отсутствие полной информации о работе системы, или о возникшем инциденте, никак не поможет улучшить работу системы. В случае инцидентов, одно из решений -  предоставление информации условий возникновения инцидента, предоставление логов системы разработчику. В идеале, предоставление параметров при возникновении ошибки, или ее демонстрация. Вроде бы, и так понятно, но может быть запрещено политиками заказчика. В общем, наблюдаемость влияет на качество, а значит и на стоимость.
- Работая с тестировщиками предоставлять нужные для тестов конфигурации, чтобы учитывать качественные характеристики (yandex-tank в Movix.ru, behave тесты в МТС).

